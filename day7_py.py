# -*- coding: utf-8 -*-
"""day7.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZkiPQvtMDC_Ptrz9MmZi58XYty6PSMmi
"""

# Simple inheritance
# Multilevel inheritance
# Hybrid inheritance
# Hierarchical inheritance
# Multilevel inheritance

class BMW:#Parent class, Super class, Base class
  def super_turbo_engine(self):
    print('super_turbo_engine fast speed')

class Audi(BMW):#Child class, Sub class
  def auto_pilot(self):
    print('can run on Auto Pilot Mode!! ')

audi_r8=Audi()

audi_r8.auto_pilot()

audi_r8.super_turbo_engine()

M4=BMW()

class Daily_Object:
  def phone_case(self):
    print('Strong Build Phone Case')

class JBL:
  def sonic_speaker(self):
    print('High Quality Sound Speaker')

class Samsung:
  def screen_display(self):
    print('High Quality Screen')

class Snapdragon:
  def chip_set(self):
    print('High Performance Chip Set')

class Sony:
  def camera(self):
    print('High Quality Camera')


class Lava:
  def Charger(self):
    print('Superfast Charger!! Lava ')

class One_Plus:
  def Charger(self):
    print('Superfast Charger!! One Plus')



class Mobile(Daily_Object, JBL , Sony, Samsung, Snapdragon, One_Plus, Lava):
  def __init__(self):
    print('Phone Object Created Successfully')

  def Charger(self):
    print('Superfast Charger')

nothing = Mobile()

nothing.Charger()

nothing.camera()

nothing.chip_set()

class GrandFather:
  def land_property(self):
    print('Land Property!!')

class Father(GrandFather):
  def bank_balance(self):
    print('Big Money Player , Huge Bank Balance !!')

class Son(Father):
  def political_power(self):
    print('Political Power!!')
class GrandSon(Son):
  def mind(self):
    print('Mind for Self Study !!')

class Friend(GrandSon):
  def __init__(self):
    print('Nothing')

aman = GrandSon()
print('done')

aman.land_property()

aman.bank_balance()
aman.political_power()

karan = Friend()

karan.land_property()
karan.bank_balance()
karan.political_power()
karan.mind()

class Hybrid_class(Mobile,Friend, Audi):
  def __init__(self):
    print('Hybrid Class')

  def info(self):
    print('It can call any methods!!')

ob = Hybrid_class()

ob.super_turbo_engine()

class UGC:
  def __init__(self):
    print('Grant Permission')

  def college_approved(self):
    print('List of Colleges!!')

class DTU(UGC):
  def multiple_colleges(self):
    print('List of Colleges!!')

class BHU(UGC):
  def multiple_colleges(self):
    print('List of Colleges!!')

class NIT(UGC):
  def multiple_colleges(self):
    print('List of Colleges!!')

class IIT(UGC):
  def multiple_colleges(self):
    print('List of Colleges!!')

ob1 = DTU()

a= str(567)
len(a)

class Car:
  def speed(self):
    return("Max Speed is 240km/hr")

  def auto_pilot(self):
    return(  "Auto Pilot Mode")

class BMW(Car):
  def speed(self):
    return("Max Speed is 260km/hr")

  def info(self):
    return('BMW Car')

class Audi(Car):
  def speed(self):
    return("Max Speed is 280km/hr")


  def info(self):
    return('Audi Car')
for i in [Car, BMW, Audi]:
  f1=i()
  print('F1 car speed',f1.speed())

class IINTM:
  def intro(self):
    print("Hello Candidate")

  def intro(self,name):
    print(f'Hello {name},how are you')

  def intro(self,name,address):
    print(f'Hello {name},how are you')
    print(f'Your Address is {address}')
a=IINTM()
a.intro('aman','Delhi')

class IINTM: #overloading can only done through this method only
  def intro(self,name=None,address=None):
    if (name == None) and (address== None):
      print('Hello Candidate')
    elif name!=None and address == None:
      print(f'Hello {name},how are you')
    elif name!=None and address!=None:
      print(f'Hello {name},how are you')
      print(f'Your Address is {address}')
    else:
      print('Hello Buddy')
a=IINTM()
a.intro(address= 'noida')
a.intro('aman','Delhi')
a.intro()
a.intro('aaryan')

from abc import ABC, abstractmethod

class Website(ABC):
  @abstractmethod
  def login(self):
    print('This is a Login method')
  @abstractmethod
  def logout(self):
    print('This is a Logout method')

asus=Website()

class Krishna(Website):
  def login(self):
    print('This is a Login method')
  def logout(self):
    print('This is a Logout method')
  def signup(self):
    print('This is a Signup method')

google = Krishna()
google.login()
google.logout()
google.signup()



