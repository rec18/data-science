# -*- coding: utf-8 -*-
"""day6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tGh4srBeMS6gVIs18vxBxw9bTkhikfQK
"""

import qrcode
img = qrcode.make('https://colab.research.google.com/drive/1SgQwQOgSnm_IYduZUOCcE9rqhK9_xTAg?usp=sharing')
img.save('myqr.png')

# pip install qrcode

# Python Basic
# Conditional Programming
# Loops
# Functional Programming
# Module Creation
# File Handling
# Database connectivity
# OOPs

a  = 'Naman'

print(type(a))

class IITM:

  def intro():
    print('Hello Buddy!!, how are you??')

  def say_hello():
    print('Hello!!')

  def bye():
    print('Bye Bye!!')

a = int(45)
print(type(a))

class Remote: #for pass ... use this dot

  def __init__(self):#  class constructor, # magic method, #dunder method
    print('Object has been created with class Remote')
    print('Now you can use it')



  def volume_up(self): #variable is passed to bind with the method
    print("volume up by 1 unit")

  def volume_down(self):
    print("volume down by 1 unit")

  def power_on(self):
    print('TV is ON')

  def power_off(self):
    print('TV is OFF')

  def auto_suggest_channel(self):
    import time
    print('Searching Trending Channel !!')
    time.sleep(3)
    print("Youtube Tseries")

  def __del__(self): #class destructor
    print('Object has been destroyed')

ayan = IITM()
print(type(ayan))

mi=Remote()
print("done")

mi.power_on()

mi.auto_suggest_channel()

del(mi)

mi

class Car:
  def __init__(self):
    self.color = "black"
    self.wheel = 4
    self.airbag_support = True
    self.spare_wheel = 1
    self.fuel_type = "Petrol "
    self.car_type = 'Sedan'
    self.Gear_type = "Automatic"
    print("Your Car Is Ready")

#==================================
  def auto_park(self):
    import IPython
    url = '''https://www.teslarati.com/wp-content/uploads/2021/08/tesla-autopark-fsd-vision-based.gif'''
    display(IPython.display.Image(url=url))


  def engine_on(self):
    # import pygame
    # py.init()
    # path = r'C:\Users\rajat\Downloads\motor-v8-plymouth-barracuda-encendido-acelerada-marcha-243224.mp3' # Raw string to handle backslashes
    # pygame.mixer.Sound(path)
    # music.play()
    print("Engine On (Sound playback not supported in Colab)")


  def speed_up(self):
     c = 10
     while c<=200:
      import time
      print(f'Speed is Increasing by {c} km/hr')
      c+=10
      display(clear=True)
      time.sleep(1)
      if c>=100:
        print('You are crossing speed limit')
        break

  def drift_brake(self,drift = False):
    if drift == True:
          # import pygame
          # pygame.init()
          # path = r'C:\Users\rajat\Downloads\-110063.mp3' # Raw string to handle backslashes
          # pygame.mixer.Sound(path)
          # music.play()
          import IPython
          url='''https://media.tenor.com/puPGAEN97U0AAAAM/lol-mekro.gif'''
          display(IPython.display.Image(url=url))
    else:
      print('Brake Applied')

bmw=Car()#instantiation

bmw.drift_brake(True)

bmw.auto_park()



bmw.speed_up()

#constructor or instance variable helps in the change of data for particular object which helps the coder to do not make chances in original code

kia= Car()

kia.spare_wheel

kia.Gear_type

tata=Car()

tata.color

tata.color="white"

tata.color

tata.Gear_type



maruti=Car()

maruti.color

maruti.Gear_type="Manual"

maruti.Gear_type

class ATM_Version_1:
  def __init__(self):
    print("Object Created Successfully")
    self._pin = 1111
    self._balance = 2000
  def change_pin(self):
    self.pin = input("Enter New Pin: ")
    print('You Pin Has Been Changed')

  def show_balance(self):
    print(f'''Your Balance is RS {self._balance}''')

  def atm_performance_status(self):
    print('ATM Working Fine 100%')

sbi=ATM_Version_1()

sbi.show_balance()

class ATM_Version_2:#_ single underscore helps to create protected __ double
  def __init__(self):
    print("Object Created Successfully")
    self.__pin = 1111
    self.__balance = 2000
  def change_pin(self):
    self.pin = input("Enter New Pin: ")
    print('You Pin Has Been Changed')

  def show_balance(self):
    print(f'''Your Balance is RS {self.__balance}''')

  def __atm_performance_status(self):
    print('ATM Working Fine 100%')

sbi=ATM_Version_2()

sbi.show_balance()

sbi._ATM_Version_2__balance

sbi._ATM_Version_2__atm_performance_status()

sbi._ATM_Version_2__pin