# -*- coding: utf-8 -*-
"""krishna.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10kemMJDPXr4a5OhabxLbOyvYxTgaxzaP
"""

age=23
try:
  print(1/0) # Commenting this out to avoid ZeroDivisionError
  if age>=18:
    print('can vote')
  else:
    print("can't vote")
except ZeroDivisionError:
    print('Cannot divide by zero')
except TypeError:
    print('Invalid type comparison')

def student_records(**kwargs):
  import pandas as pd
  try:
    data=pd.DataFrame(kwargs)
    return data
  except:
    data=pd.DataFrame(kwargs,index=[1])
    return data

student_records(Name='Ajay',Age=12,Address ="noida")

student_records(Name= ['Ajay','Krishna','Mohit'],
                Age= [12,10,9],
                Address = ['Noida','New Delhi','Pune'])

def check_palindrome(word:str):
  if type(word) == str:
    word = word.upper()
    if word == word[::-1]:
      return 'Palindrome'
    else:
      return 'Not a Plaindrome'
  else:
    return 'Invalid Data Type'

check_palindrome('harry')

check_palindrome('harry')

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

print(give_fibo(20))

print(give_fibo(20))

print(give_fibo(20))

def check_prime(number):
    for i in range(2,number):
        if number % i == 0:
            return 'Not a Prime Number'
            break
            print('Happy Holi')
    else:
        return 'Prime Number'

n = 5

for i in range(1,n+1):
  print(i * '* ')

n = 5

for i in range(1,n+1):
  print(' '*(n-i) + i*'* ')

'hello' + 'World'



'hello' + 'World'

def print_star(n = 5, typ = 'left',shape = '*'):
  if typ  == 'left':
    space  = ''

  elif typ == 'right':
    space = '  '

  elif typ == 'mid':
    space = ' '

  for i in range(1,n+1):
    print(space*(n-i) + i*f'{shape} ')

print_star(6,'mid','%')

def show_time():
  try:
    while True:
      import time
      print(time.asctime())
      time.sleep(1)
      display(clear=True)
  except:
    print("timer has been intrupted by the user")

show_time()

sales = [45678,63,456,347,3245]

# min(sales)



def minn(*data):
  min_ele = data[0]
  for i in data[1:]:
    if i< min_ele:
      min_ele = i
  return min_ele

minn(376,246,354,8,667,468)

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

add_hashtag(*company)

age=23
try:
  print(1/0) # Commenting this out to avoid ZeroDivisionError
  if age>=18:
    print('can vote')
  else:
    print("can't vote")
except ZeroDivisionError:
    print('Cannot divide by zero')
except TypeError:
    print('Invalid type comparison')

def student_records(**kwargs):
  import pandas as pd
  try:
    data=pd.DataFrame(kwargs)
    return data
  except:
    data=pd.DataFrame(kwargs,index=[1])
    return data

student_records(Name='Ajay',Age=12,Address ="noida")

student_records(Name= ['Ajay','Krishna','Mohit'],
                Age= [12,10,9],
                Address = ['Noida','New Delhi','Pune'])

def check_palindrome(word:str):
  if type(word) == str:
    word = word.upper()
    if word == word[::-1]:
      return 'Palindrome'
    else:
      return 'Not a Plaindrome'
  else:
    return 'Invalid Data Type'

check_palindrome('harry')

check_palindrome('harry')

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

print(give_fibo(20))

print(give_fibo(20))

print(give_fibo(20))

def check_prime(number):
    for i in range(2,number):
        if number % i == 0:
            return 'Not a Prime Number'
            break
            print('Happy Holi')
    else:
        return 'Prime Number'

n = 5

for i in range(1,n+1):
  print(i * '* ')

n = 5

for i in range(1,n+1):
  print(' '*(n-i) + i*'* ')

'hello' + 'World'



'hello' + 'World'

def print_star(n = 5, typ = 'left',shape = '*'):
  if typ  == 'left':
    space  = ''

  elif typ == 'right':
    space = '  '

  elif typ == 'mid':
    space = ' '

  for i in range(1,n+1):
    print(space*(n-i) + i*f'{shape} ')

print_star(6,'mid','%')

def show_time():
  try:
    while True:
      import time
      print(time.asctime())
      time.sleep(1)
      display(clear=True)
  except:
    print("timer has been intrupted by the user")

show_time()

sales = [45678,63,456,347,3245]

# min(sales)



def minn(*data):
  min_ele = data[0]
  for i in data[1:]:
    if i< min_ele:
      min_ele = i
  return min_ele

minn(376,246,354,8,667,468)

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

add_hashtag(*company)

age=23
try:
  print(1/0) # Commenting this out to avoid ZeroDivisionError
  if age>=18:
    print('can vote')
  else:
    print("can't vote")
except ZeroDivisionError:
    print('Cannot divide by zero')
except TypeError:
    print('Invalid type comparison')

def student_records(**kwargs):
  import pandas as pd
  try:
    data=pd.DataFrame(kwargs)
    return data
  except:
    data=pd.DataFrame(kwargs,index=[1])
    return data

student_records(Name='Ajay',Age=12,Address ="noida")

student_records(Name= ['Ajay','Krishna','Mohit'],
                Age= [12,10,9],
                Address = ['Noida','New Delhi','Pune'])

def check_palindrome(word:str):
  if type(word) == str:
    word = word.upper()
    if word == word[::-1]:
      return 'Palindrome'
    else:
      return 'Not a Plaindrome'
  else:
    return 'Invalid Data Type'

check_palindrome('harry')

check_palindrome('harry')

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

print(give_fibo(20))

print(give_fibo(20))

print(give_fibo(20))

def check_prime(number):
    for i in range(2,number):
        if number % i == 0:
            return 'Not a Prime Number'
            break
            print('Happy Holi')
    else:
        return 'Prime Number'

n = 5

for i in range(1,n+1):
  print(i * '* ')

n = 5

for i in range(1,n+1):
  print(' '*(n-i) + i*'* ')

'hello' + 'World'



'hello' + 'World'

def print_star(n = 5, typ = 'left',shape = '*'):
  if typ  == 'left':
    space  = ''

  elif typ == 'right':
    space = '  '

  elif typ == 'mid':
    space = ' '

  for i in range(1,n+1):
    print(space*(n-i) + i*f'{shape} ')

print_star(6,'mid','%')

def show_time():
  try:
    while True:
      import time
      print(time.asctime())
      time.sleep(1)
      display(clear=True)
  except:
    print("timer has been intrupted by the user")

show_time()

sales = [45678,63,456,347,3245]

# min(sales)



def minn(*data):
  min_ele = data[0]
  for i in data[1:]:
    if i< min_ele:
      min_ele = i
  return min_ele

minn(376,246,354,8,667,468)

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

add_hashtag(*company)

age=23
try:
  print(1/0) # Commenting this out to avoid ZeroDivisionError
  if age>=18:
    print('can vote')
  else:
    print("can't vote")
except ZeroDivisionError:
    print('Cannot divide by zero')
except TypeError:
    print('Invalid type comparison')

def student_records(**kwargs):
  import pandas as pd
  try:
    data=pd.DataFrame(kwargs)
    return data
  except:
    data=pd.DataFrame(kwargs,index=[1])
    return data

student_records(Name='Ajay',Age=12,Address ="noida")

student_records(Name= ['Ajay','Krishna','Mohit'],
                Age= [12,10,9],
                Address = ['Noida','New Delhi','Pune'])

def check_palindrome(word:str):
  if type(word) == str:
    word = word.upper()
    if word == word[::-1]:
      return 'Palindrome'
    else:
      return 'Not a Plaindrome'
  else:
    return 'Invalid Data Type'

check_palindrome('harry')

check_palindrome('harry')

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

print(give_fibo(20))

print(give_fibo(20))

print(give_fibo(20))

def check_prime(number):
    for i in range(2,number):
        if number % i == 0:
            return 'Not a Prime Number'
            break
            print('Happy Holi')
    else:
        return 'Prime Number'

n = 5

for i in range(1,n+1):
  print(i * '* ')

n = 5

for i in range(1,n+1):
  print(' '*(n-i) + i*'* ')

'hello' + 'World'



'hello' + 'World'

def print_star(n = 5, typ = 'left',shape = '*'):
  if typ  == 'left':
    space  = ''

  elif typ == 'right':
    space = '  '

  elif typ == 'mid':
    space = ' '

  for i in range(1,n+1):
    print(space*(n-i) + i*f'{shape} ')

print_star(6,'mid','%')

def show_time():
  try:
    while True:
      import time
      print(time.asctime())
      time.sleep(1)
      display(clear=True)
  except:
    print("timer has been intrupted by the user")

show_time()

sales = [45678,63,456,347,3245]

# min(sales)



def minn(*data):
  min_ele = data[0]
  for i in data[1:]:
    if i< min_ele:
      min_ele = i
  return min_ele

minn(376,246,354,8,667,468)

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

add_hashtag(*company)

age=23
try:
  print(1/0) # Commenting this out to avoid ZeroDivisionError
  if age>=18:
    print('can vote')
  else:
    print("can't vote")
except ZeroDivisionError:
    print('Cannot divide by zero')
except TypeError:
    print('Invalid type comparison')

def student_records(**kwargs):
  import pandas as pd
  try:
    data=pd.DataFrame(kwargs)
    return data
  except:
    data=pd.DataFrame(kwargs,index=[1])
    return data

student_records(Name='Ajay',Age=12,Address ="noida")

student_records(Name= ['Ajay','Krishna','Mohit'],
                Age= [12,10,9],
                Address = ['Noida','New Delhi','Pune'])

def check_palindrome(word:str):
  if type(word) == str:
    word = word.upper()
    if word == word[::-1]:
      return 'Palindrome'
    else:
      return 'Not a Plaindrome'
  else:
    return 'Invalid Data Type'

check_palindrome('harry')

check_palindrome('harry')

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

print(give_fibo(20))

print(give_fibo(20))

print(give_fibo(20))

def check_prime(number):
    for i in range(2,number):
        if number % i == 0:
            return 'Not a Prime Number'
            break
            print('Happy Holi')
    else:
        return 'Prime Number'

n = 5

for i in range(1,n+1):
  print(i * '* ')

n = 5

for i in range(1,n+1):
  print(' '*(n-i) + i*'* ')

'hello' + 'World'



'hello' + 'World'

def print_star(n = 5, typ = 'left',shape = '*'):
  if typ  == 'left':
    space  = ''

  elif typ == 'right':
    space = '  '

  elif typ == 'mid':
    space = ' '

  for i in range(1,n+1):
    print(space*(n-i) + i*f'{shape} ')

print_star(6,'mid','%')

def show_time():
  try:
    while True:
      import time
      print(time.asctime())
      time.sleep(1)
      display(clear=True)
  except:
    print("timer has been intrupted by the user")

show_time()

sales = [45678,63,456,347,3245]

# min(sales)



def minn(*data):
  min_ele = data[0]
  for i in data[1:]:
    if i< min_ele:
      min_ele = i
  return min_ele

minn(376,246,354,8,667,468)

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

add_hashtag(*company)

age=23
try:
  print(1/0) # Commenting this out to avoid ZeroDivisionError
  if age>=18:
    print('can vote')
  else:
    print("can't vote")
except ZeroDivisionError:
    print('Cannot divide by zero')
except TypeError:
    print('Invalid type comparison')

def student_records(**kwargs):
  import pandas as pd
  try:
    data=pd.DataFrame(kwargs)
    return data
  except:
    data=pd.DataFrame(kwargs,index=[1])
    return data

student_records(Name='Ajay',Age=12,Address ="noida")

student_records(Name= ['Ajay','Krishna','Mohit'],
                Age= [12,10,9],
                Address = ['Noida','New Delhi','Pune'])

def check_palindrome(word:str):
  if type(word) == str:
    word = word.upper()
    if word == word[::-1]:
      return 'Palindrome'
    else:
      return 'Not a Plaindrome'
  else:
    return 'Invalid Data Type'

check_palindrome('harry')

check_palindrome('harry')

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

print(give_fibo(20))

print(give_fibo(20))

print(give_fibo(20))

def check_prime(number):
    for i in range(2,number):
        if number % i == 0:
            return 'Not a Prime Number'
            break
            print('Happy Holi')
    else:
        return 'Prime Number'

n = 5

for i in range(1,n+1):
  print(i * '* ')

n = 5

for i in range(1,n+1):
  print(' '*(n-i) + i*'* ')

'hello' + 'World'



'hello' + 'World'

def print_star(n = 5, typ = 'left',shape = '*'):
  if typ  == 'left':
    space  = ''

  elif typ == 'right':
    space = '  '

  elif typ == 'mid':
    space = ' '

  for i in range(1,n+1):
    print(space*(n-i) + i*f'{shape} ')

print_star(6,'mid','%')

def show_time():
  try:
    while True:
      import time
      print(time.asctime())
      time.sleep(1)
      display(clear=True)
  except:
    print("timer has been intrupted by the user")

show_time()

sales = [45678,63,456,347,3245]

# min(sales)



def minn(*data):
  min_ele = data[0]
  for i in data[1:]:
    if i< min_ele:
      min_ele = i
  return min_ele

minn(376,246,354,8,667,468)

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

add_hashtag(*company)

age=23
try:
  print(1/0) # Commenting this out to avoid ZeroDivisionError
  if age>=18:
    print('can vote')
  else:
    print("can't vote")
except ZeroDivisionError:
    print('Cannot divide by zero')
except TypeError:
    print('Invalid type comparison')

def student_records(**kwargs):
  import pandas as pd
  try:
    data=pd.DataFrame(kwargs)
    return data
  except:
    data=pd.DataFrame(kwargs,index=[1])
    return data

student_records(Name='Ajay',Age=12,Address ="noida")

student_records(Name= ['Ajay','Krishna','Mohit'],
                Age= [12,10,9],
                Address = ['Noida','New Delhi','Pune'])

def check_palindrome(word:str):
  if type(word) == str:
    word = word.upper()
    if word == word[::-1]:
      return 'Palindrome'
    else:
      return 'Not a Plaindrome'
  else:
    return 'Invalid Data Type'

check_palindrome('harry')

check_palindrome('harry')

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

print(give_fibo(20))

print(give_fibo(20))

print(give_fibo(20))

def check_prime(number):
    for i in range(2,number):
        if number % i == 0:
            return 'Not a Prime Number'
            break
            print('Happy Holi')
    else:
        return 'Prime Number'

n = 5

for i in range(1,n+1):
  print(i * '* ')

n = 5

for i in range(1,n+1):
  print(' '*(n-i) + i*'* ')

'hello' + 'World'



'hello' + 'World'

def print_star(n = 5, typ = 'left',shape = '*'):
  if typ  == 'left':
    space  = ''

  elif typ == 'right':
    space = '  '

  elif typ == 'mid':
    space = ' '

  for i in range(1,n+1):
    print(space*(n-i) + i*f'{shape} ')

print_star(6,'mid','%')

def show_time():
  try:
    while True:
      import time
      print(time.asctime())
      time.sleep(1)
      display(clear=True)
  except:
    print("timer has been intrupted by the user")

show_time()

sales = [45678,63,456,347,3245]

# min(sales)



def minn(*data):
  min_ele = data[0]
  for i in data[1:]:
    if i< min_ele:
      min_ele = i
  return min_ele

minn(376,246,354,8,667,468)

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

add_hashtag(*company)

age=23
try:
  print(1/0) # Commenting this out to avoid ZeroDivisionError
  if age>=18:
    print('can vote')
  else:
    print("can't vote")
except ZeroDivisionError:
    print('Cannot divide by zero')
except TypeError:
    print('Invalid type comparison')

def student_records(**kwargs):
  import pandas as pd
  try:
    data=pd.DataFrame(kwargs)
    return data
  except:
    data=pd.DataFrame(kwargs,index=[1])
    return data

student_records(Name='Ajay',Age=12,Address ="noida")

student_records(Name= ['Ajay','Krishna','Mohit'],
                Age= [12,10,9],
                Address = ['Noida','New Delhi','Pune'])

def check_palindrome(word:str):
  if type(word) == str:
    word = word.upper()
    if word == word[::-1]:
      return 'Palindrome'
    else:
      return 'Not a Plaindrome'
  else:
    return 'Invalid Data Type'

check_palindrome('harry')

check_palindrome('harry')

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

print(give_fibo(20))

print(give_fibo(20))

print(give_fibo(20))

def check_prime(number):
    for i in range(2,number):
        if number % i == 0:
            return 'Not a Prime Number'
            break
            print('Happy Holi')
    else:
        return 'Prime Number'

n = 5

for i in range(1,n+1):
  print(i * '* ')

n = 5

for i in range(1,n+1):
  print(' '*(n-i) + i*'* ')

'hello' + 'World'



'hello' + 'World'

def print_star(n = 5, typ = 'left',shape = '*'):
  if typ  == 'left':
    space  = ''

  elif typ == 'right':
    space = '  '

  elif typ == 'mid':
    space = ' '

  for i in range(1,n+1):
    print(space*(n-i) + i*f'{shape} ')

print_star(6,'mid','%')

def show_time():
  try:
    while True:
      import time
      print(time.asctime())
      time.sleep(1)
      display(clear=True)
  except:
    print("timer has been intrupted by the user")

show_time()

sales = [45678,63,456,347,3245]

# min(sales)



def minn(*data):
  min_ele = data[0]
  for i in data[1:]:
    if i< min_ele:
      min_ele = i
  return min_ele

minn(376,246,354,8,667,468)

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

add_hashtag(*company)

age=23
try:
  print(1/0) # Commenting this out to avoid ZeroDivisionError
  if age>=18:
    print('can vote')
  else:
    print("can't vote")
except ZeroDivisionError:
    print('Cannot divide by zero')
except TypeError:
    print('Invalid type comparison')

def student_records(**kwargs):
  import pandas as pd
  try:
    data=pd.DataFrame(kwargs)
    return data
  except:
    data=pd.DataFrame(kwargs,index=[1])
    return data

student_records(Name='Ajay',Age=12,Address ="noida")

student_records(Name= ['Ajay','Krishna','Mohit'],
                Age= [12,10,9],
                Address = ['Noida','New Delhi','Pune'])

def check_palindrome(word:str):
  if type(word) == str:
    word = word.upper()
    if word == word[::-1]:
      return 'Palindrome'
    else:
      return 'Not a Plaindrome'
  else:
    return 'Invalid Data Type'

check_palindrome('harry')

check_palindrome('harry')

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

print(give_fibo(20))

print(give_fibo(20))

print(give_fibo(20))

def check_prime(number):
    for i in range(2,number):
        if number % i == 0:
            return 'Not a Prime Number'
            break
            print('Happy Holi')
    else:
        return 'Prime Number'

n = 5

for i in range(1,n+1):
  print(i * '* ')

n = 5

for i in range(1,n+1):
  print(' '*(n-i) + i*'* ')

'hello' + 'World'



'hello' + 'World'

def print_star(n = 5, typ = 'left',shape = '*'):
  if typ  == 'left':
    space  = ''

  elif typ == 'right':
    space = '  '

  elif typ == 'mid':
    space = ' '

  for i in range(1,n+1):
    print(space*(n-i) + i*f'{shape} ')

print_star(6,'mid','%')

def show_time():
  try:
    while True:
      import time
      print(time.asctime())
      time.sleep(1)
      display(clear=True)
  except:
    print("timer has been intrupted by the user")

show_time()

sales = [45678,63,456,347,3245]

# min(sales)



def minn(*data):
  min_ele = data[0]
  for i in data[1:]:
    if i< min_ele:
      min_ele = i
  return min_ele

minn(376,246,354,8,667,468)

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

add_hashtag(*company)

age=23
try:
  print(1/0) # Commenting this out to avoid ZeroDivisionError
  if age>=18:
    print('can vote')
  else:
    print("can't vote")
except ZeroDivisionError:
    print('Cannot divide by zero')
except TypeError:
    print('Invalid type comparison')

def student_records(**kwargs):
  import pandas as pd
  try:
    data=pd.DataFrame(kwargs)
    return data
  except:
    data=pd.DataFrame(kwargs,index=[1])
    return data

student_records(Name='Ajay',Age=12,Address ="noida")

student_records(Name= ['Ajay','Krishna','Mohit'],
                Age= [12,10,9],
                Address = ['Noida','New Delhi','Pune'])

def check_palindrome(word:str):
  if type(word) == str:
    word = word.upper()
    if word == word[::-1]:
      return 'Palindrome'
    else:
      return 'Not a Plaindrome'
  else:
    return 'Invalid Data Type'

check_palindrome('harry')

check_palindrome('harry')

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

print(give_fibo(20))

print(give_fibo(20))

print(give_fibo(20))

def check_prime(number):
    for i in range(2,number):
        if number % i == 0:
            return 'Not a Prime Number'
            break
            print('Happy Holi')
    else:
        return 'Prime Number'

n = 5

for i in range(1,n+1):
  print(i * '* ')

n = 5

for i in range(1,n+1):
  print(' '*(n-i) + i*'* ')

'hello' + 'World'



'hello' + 'World'

def print_star(n = 5, typ = 'left',shape = '*'):
  if typ  == 'left':
    space  = ''

  elif typ == 'right':
    space = '  '

  elif typ == 'mid':
    space = ' '

  for i in range(1,n+1):
    print(space*(n-i) + i*f'{shape} ')

print_star(6,'mid','%')

def show_time():
  try:
    while True:
      import time
      print(time.asctime())
      time.sleep(1)
      display(clear=True)
  except:
    print("timer has been intrupted by the user")

show_time()

sales = [45678,63,456,347,3245]

# min(sales)



def minn(*data):
  min_ele = data[0]
  for i in data[1:]:
    if i< min_ele:
      min_ele = i
  return min_ele

minn(376,246,354,8,667,468)

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

add_hashtag(*company)

age=23
try:
  print(1/0) # Commenting this out to avoid ZeroDivisionError
  if age>=18:
    print('can vote')
  else:
    print("can't vote")
except ZeroDivisionError:
    print('Cannot divide by zero')
except TypeError:
    print('Invalid type comparison')

def student_records(**kwargs):
  import pandas as pd
  try:
    data=pd.DataFrame(kwargs)
    return data
  except:
    data=pd.DataFrame(kwargs,index=[1])
    return data

student_records(Name='Ajay',Age=12,Address ="noida")

student_records(Name= ['Ajay','Krishna','Mohit'],
                Age= [12,10,9],
                Address = ['Noida','New Delhi','Pune'])

def check_palindrome(word:str):
  if type(word) == str:
    word = word.upper()
    if word == word[::-1]:
      return 'Palindrome'
    else:
      return 'Not a Plaindrome'
  else:
    return 'Invalid Data Type'

check_palindrome('harry')

check_palindrome('harry')

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

print(give_fibo(20))

print(give_fibo(20))

print(give_fibo(20))

def check_prime(number):
    for i in range(2,number):
        if number % i == 0:
            return 'Not a Prime Number'
            break
            print('Happy Holi')
    else:
        return 'Prime Number'

n = 5

for i in range(1,n+1):
  print(i * '* ')

n = 5

for i in range(1,n+1):
  print(' '*(n-i) + i*'* ')

'hello' + 'World'



'hello' + 'World'

def print_star(n = 5, typ = 'left',shape = '*'):
  if typ  == 'left':
    space  = ''

  elif typ == 'right':
    space = '  '

  elif typ == 'mid':
    space = ' '

  for i in range(1,n+1):
    print(space*(n-i) + i*f'{shape} ')

print_star(6,'mid','%')

def show_time():
  try:
    while True:
      import time
      print(time.asctime())
      time.sleep(1)
      display(clear=True)
  except:
    print("timer has been intrupted by the user")

show_time()

sales = [45678,63,456,347,3245]

# min(sales)



def minn(*data):
  min_ele = data[0]
  for i in data[1:]:
    if i< min_ele:
      min_ele = i
  return min_ele

minn(376,246,354,8,667,468)

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

add_hashtag(*company)

age=23
try:
  print(1/0) # Commenting this out to avoid ZeroDivisionError
  if age>=18:
    print('can vote')
  else:
    print("can't vote")
except ZeroDivisionError:
    print('Cannot divide by zero')
except TypeError:
    print('Invalid type comparison')

def student_records(**kwargs):
  import pandas as pd
  try:
    data=pd.DataFrame(kwargs)
    return data
  except:
    data=pd.DataFrame(kwargs,index=[1])
    return data

student_records(Name='Ajay',Age=12,Address ="noida")

student_records(Name= ['Ajay','Krishna','Mohit'],
                Age= [12,10,9],
                Address = ['Noida','New Delhi','Pune'])

def check_palindrome(word:str):
  if type(word) == str:
    word = word.upper()
    if word == word[::-1]:
      return 'Palindrome'
    else:
      return 'Not a Plaindrome'
  else:
    return 'Invalid Data Type'

check_palindrome('harry')

check_palindrome('harry')

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

print(give_fibo(20))

print(give_fibo(20))

print(give_fibo(20))

def check_prime(number):
    for i in range(2,number):
        if number % i == 0:
            return 'Not a Prime Number'
            break
            print('Happy Holi')
    else:
        return 'Prime Number'

n = 5

for i in range(1,n+1):
  print(i * '* ')

n = 5

for i in range(1,n+1):
  print(' '*(n-i) + i*'* ')

'hello' + 'World'



'hello' + 'World'

def print_star(n = 5, typ = 'left',shape = '*'):
  if typ  == 'left':
    space  = ''

  elif typ == 'right':
    space = '  '

  elif typ == 'mid':
    space = ' '

  for i in range(1,n+1):
    print(space*(n-i) + i*f'{shape} ')

print_star(6,'mid','%')

def show_time():
  try:
    while True:
      import time
      print(time.asctime())
      time.sleep(1)
      display(clear=True)
  except:
    print("timer has been intrupted by the user")

show_time()

sales = [45678,63,456,347,3245]

# min(sales)



def minn(*data):
  min_ele = data[0]
  for i in data[1:]:
    if i< min_ele:
      min_ele = i
  return min_ele

minn(376,246,354,8,667,468)

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

add_hashtag(*company)

age=23
try:
  print(1/0) # Commenting this out to avoid ZeroDivisionError
  if age>=18:
    print('can vote')
  else:
    print("can't vote")
except ZeroDivisionError:
    print('Cannot divide by zero')
except TypeError:
    print('Invalid type comparison')

def student_records(**kwargs):
  import pandas as pd
  try:
    data=pd.DataFrame(kwargs)
    return data
  except:
    data=pd.DataFrame(kwargs,index=[1])
    return data

student_records(Name='Ajay',Age=12,Address ="noida")

student_records(Name= ['Ajay','Krishna','Mohit'],
                Age= [12,10,9],
                Address = ['Noida','New Delhi','Pune'])

def check_palindrome(word:str):
  if type(word) == str:
    word = word.upper()
    if word == word[::-1]:
      return 'Palindrome'
    else:
      return 'Not a Plaindrome'
  else:
    return 'Invalid Data Type'

check_palindrome('harry')

check_palindrome('harry')

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

print(give_fibo(20))

print(give_fibo(20))

print(give_fibo(20))

def check_prime(number):
    for i in range(2,number):
        if number % i == 0:
            return 'Not a Prime Number'
            break
            print('Happy Holi')
    else:
        return 'Prime Number'

n = 5

for i in range(1,n+1):
  print(i * '* ')

n = 5

for i in range(1,n+1):
  print(' '*(n-i) + i*'* ')

'hello' + 'World'



'hello' + 'World'

def print_star(n = 5, typ = 'left',shape = '*'):
  if typ  == 'left':
    space  = ''

  elif typ == 'right':
    space = '  '

  elif typ == 'mid':
    space = ' '

  for i in range(1,n+1):
    print(space*(n-i) + i*f'{shape} ')

print_star(6,'mid','%')

def show_time():
  try:
    while True:
      import time
      print(time.asctime())
      time.sleep(1)
      display(clear=True)
  except:
    print("timer has been intrupted by the user")

show_time()

sales = [45678,63,456,347,3245]

# min(sales)



def minn(*data):
  min_ele = data[0]
  for i in data[1:]:
    if i< min_ele:
      min_ele = i
  return min_ele

minn(376,246,354,8,667,468)

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

add_hashtag(*company)

age=23
try:
  print(1/0) # Commenting this out to avoid ZeroDivisionError
  if age>=18:
    print('can vote')
  else:
    print("can't vote")
except ZeroDivisionError:
    print('Cannot divide by zero')
except TypeError:
    print('Invalid type comparison')

def student_records(**kwargs):
  import pandas as pd
  try:
    data=pd.DataFrame(kwargs)
    return data
  except:
    data=pd.DataFrame(kwargs,index=[1])
    return data

student_records(Name='Ajay',Age=12,Address ="noida")

student_records(Name= ['Ajay','Krishna','Mohit'],
                Age= [12,10,9],
                Address = ['Noida','New Delhi','Pune'])

def check_palindrome(word:str):
  if type(word) == str:
    word = word.upper()
    if word == word[::-1]:
      return 'Palindrome'
    else:
      return 'Not a Plaindrome'
  else:
    return 'Invalid Data Type'

check_palindrome('harry')

check_palindrome('harry')

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

print(give_fibo(20))

print(give_fibo(20))

print(give_fibo(20))

def check_prime(number):
    for i in range(2,number):
        if number % i == 0:
            return 'Not a Prime Number'
            break
            print('Happy Holi')
    else:
        return 'Prime Number'

n = 5

for i in range(1,n+1):
  print(i * '* ')

n = 5

for i in range(1,n+1):
  print(' '*(n-i) + i*'* ')

'hello' + 'World'



'hello' + 'World'

def print_star(n = 5, typ = 'left',shape = '*'):
  if typ  == 'left':
    space  = ''

  elif typ == 'right':
    space = '  '

  elif typ == 'mid':
    space = ' '

  for i in range(1,n+1):
    print(space*(n-i) + i*f'{shape} ')

print_star(6,'mid','%')

def show_time():
  try:
    while True:
      import time
      print(time.asctime())
      time.sleep(1)
      display(clear=True)
  except:
    print("timer has been intrupted by the user")

show_time()

sales = [45678,63,456,347,3245]

# min(sales)



def minn(*data):
  min_ele = data[0]
  for i in data[1:]:
    if i< min_ele:
      min_ele = i
  return min_ele

minn(376,246,354,8,667,468)

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

add_hashtag(*company)

age=23
try:
  print(1/0) # Commenting this out to avoid ZeroDivisionError
  if age>=18:
    print('can vote')
  else:
    print("can't vote")
except ZeroDivisionError:
    print('Cannot divide by zero')
except TypeError:
    print('Invalid type comparison')

def student_records(**kwargs):
  import pandas as pd
  try:
    data=pd.DataFrame(kwargs)
    return data
  except:
    data=pd.DataFrame(kwargs,index=[1])
    return data

student_records(Name='Ajay',Age=12,Address ="noida")

student_records(Name= ['Ajay','Krishna','Mohit'],
                Age= [12,10,9],
                Address = ['Noida','New Delhi','Pune'])

def check_palindrome(word:str):
  if type(word) == str:
    word = word.upper()
    if word == word[::-1]:
      return 'Palindrome'
    else:
      return 'Not a Plaindrome'
  else:
    return 'Invalid Data Type'

check_palindrome('harry')

check_palindrome('harry')

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

print(give_fibo(20))

print(give_fibo(20))

print(give_fibo(20))

def check_prime(number):
    for i in range(2,number):
        if number % i == 0:
            return 'Not a Prime Number'
            break
            print('Happy Holi')
    else:
        return 'Prime Number'

n = 5

for i in range(1,n+1):
  print(i * '* ')

n = 5

for i in range(1,n+1):
  print(' '*(n-i) + i*'* ')

'hello' + 'World'



'hello' + 'World'

def print_star(n = 5, typ = 'left',shape = '*'):
  if typ  == 'left':
    space  = ''

  elif typ == 'right':
    space = '  '

  elif typ == 'mid':
    space = ' '

  for i in range(1,n+1):
    print(space*(n-i) + i*f'{shape} ')

print_star(6,'mid','%')

def show_time():
  try:
    while True:
      import time
      print(time.asctime())
      time.sleep(1)
      display(clear=True)
  except:
    print("timer has been intrupted by the user")

show_time()

sales = [45678,63,456,347,3245]

# min(sales)



def minn(*data):
  min_ele = data[0]
  for i in data[1:]:
    if i< min_ele:
      min_ele = i
  return min_ele

minn(376,246,354,8,667,468)

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

add_hashtag(*company)

age=23
try:
  print(1/0) # Commenting this out to avoid ZeroDivisionError
  if age>=18:
    print('can vote')
  else:
    print("can't vote")
except ZeroDivisionError:
    print('Cannot divide by zero')
except TypeError:
    print('Invalid type comparison')

def student_records(**kwargs):
  import pandas as pd
  try:
    data=pd.DataFrame(kwargs)
    return data
  except:
    data=pd.DataFrame(kwargs,index=[1])
    return data

student_records(Name='Ajay',Age=12,Address ="noida")

student_records(Name= ['Ajay','Krishna','Mohit'],
                Age= [12,10,9],
                Address = ['Noida','New Delhi','Pune'])

def check_palindrome(word:str):
  if type(word) == str:
    word = word.upper()
    if word == word[::-1]:
      return 'Palindrome'
    else:
      return 'Not a Plaindrome'
  else:
    return 'Invalid Data Type'

check_palindrome('harry')

check_palindrome('harry')

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

print(give_fibo(20))

print(give_fibo(20))

print(give_fibo(20))

def check_prime(number):
    for i in range(2,number):
        if number % i == 0:
            return 'Not a Prime Number'
            break
            print('Happy Holi')
    else:
        return 'Prime Number'

n = 5

for i in range(1,n+1):
  print(i * '* ')

n = 5

for i in range(1,n+1):
  print(' '*(n-i) + i*'* ')

'hello' + 'World'



'hello' + 'World'

def print_star(n = 5, typ = 'left',shape = '*'):
  if typ  == 'left':
    space  = ''

  elif typ == 'right':
    space = '  '

  elif typ == 'mid':
    space = ' '

  for i in range(1,n+1):
    print(space*(n-i) + i*f'{shape} ')

print_star(6,'mid','%')

def show_time():
  try:
    while True:
      import time
      print(time.asctime())
      time.sleep(1)
      display(clear=True)
  except:
    print("timer has been intrupted by the user")

show_time()

sales = [45678,63,456,347,3245]

# min(sales)



def minn(*data):
  min_ele = data[0]
  for i in data[1:]:
    if i< min_ele:
      min_ele = i
  return min_ele

minn(376,246,354,8,667,468)

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

add_hashtag(*company)

age=23
try:
  print(1/0) # Commenting this out to avoid ZeroDivisionError
  if age>=18:
    print('can vote')
  else:
    print("can't vote")
except ZeroDivisionError:
    print('Cannot divide by zero')
except TypeError:
    print('Invalid type comparison')

def student_records(**kwargs):
  import pandas as pd
  try:
    data=pd.DataFrame(kwargs)
    return data
  except:
    data=pd.DataFrame(kwargs,index=[1])
    return data

student_records(Name='Ajay',Age=12,Address ="noida")

student_records(Name= ['Ajay','Krishna','Mohit'],
                Age= [12,10,9],
                Address = ['Noida','New Delhi','Pune'])

def check_palindrome(word:str):
  if type(word) == str:
    word = word.upper()
    if word == word[::-1]:
      return 'Palindrome'
    else:
      return 'Not a Plaindrome'
  else:
    return 'Invalid Data Type'

check_palindrome('harry')

check_palindrome('harry')

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

print(give_fibo(20))

print(give_fibo(20))

print(give_fibo(20))

def check_prime(number):
    for i in range(2,number):
        if number % i == 0:
            return 'Not a Prime Number'
            break
            print('Happy Holi')
    else:
        return 'Prime Number'

n = 5

for i in range(1,n+1):
  print(i * '* ')

n = 5

for i in range(1,n+1):
  print(' '*(n-i) + i*'* ')

'hello' + 'World'



'hello' + 'World'

def print_star(n = 5, typ = 'left',shape = '*'):
  if typ  == 'left':
    space  = ''

  elif typ == 'right':
    space = '  '

  elif typ == 'mid':
    space = ' '

  for i in range(1,n+1):
    print(space*(n-i) + i*f'{shape} ')

print_star(6,'mid','%')

def show_time():
  try:
    while True:
      import time
      print(time.asctime())
      time.sleep(1)
      display(clear=True)
  except:
    print("timer has been intrupted by the user")



show_time()

sales = [45678,63,456,347,3245]

# min(sales)



def minn(*data):
  min_ele = data[0]
  for i in data[1:]:
    if i< min_ele:
      min_ele = i
  return min_ele

minn(376,246,354,8,667,468)

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

add_hashtag(*company)

age=23
try:
  print(1/0) # Commenting this out to avoid ZeroDivisionError
  if age>=18:
    print('can vote')
  else:
    print("can't vote")
except ZeroDivisionError:
    print('Cannot divide by zero')
except TypeError:
    print('Invalid type comparison')

def student_records(**kwargs):
  import pandas as pd
  try:
    data=pd.DataFrame(kwargs)
    return data
  except:
    data=pd.DataFrame(kwargs,index=[1])
    return data

student_records(Name='Ajay',Age=12,Address ="noida")

student_records(Name= ['Ajay','Krishna','Mohit'],
                Age= [12,10,9],
                Address = ['Noida','New Delhi','Pune'])

def check_palindrome(word:str):
  if type(word) == str:
    word = word.upper()
    if word == word[::-1]:
      return 'Palindrome'
    else:
      return 'Not a Plaindrome'
  else:
    return 'Invalid Data Type'

check_palindrome('harry')

check_palindrome('harry')

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

print(give_fibo(20))

print(give_fibo(20))

print(give_fibo(20))

def check_prime(number):
    for i in range(2,number):
        if number % i == 0:
            return 'Not a Prime Number'
            break
            print('Happy Holi')
    else:
        return 'Prime Number'

n = 5

for i in range(1,n+1):
  print(i * '* ')

n = 5

for i in range(1,n+1):
  print(' '*(n-i) + i*'* ')

'hello' + 'World'



'hello' + 'World'

def print_star(n = 5, typ = 'left',shape = '*'):
  if typ  == 'left':
    space  = ''

  elif typ == 'right':
    space = '  '

  elif typ == 'mid':
    space = ' '

  for i in range(1,n+1):
    print(space*(n-i) + i*f'{shape} ')

print_star(6,'mid','%')

def show_time():
  try:
    while True:
      import time
      print(time.asctime())
      time.sleep(1)
      display(clear=True)
  except:
    print("timer has been intrupted by the user")

show_time()

sales = [45678,63,456,347,3245]

# min(sales)



def minn(*data):
  min_ele = data[0]
  for i in data[1:]:
    if i< min_ele:
      min_ele = i
  return min_ele

minn(376,246,354,8,667,468)

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

add_hashtag(*company)

age=23
try:
  print(1/0) # Commenting this out to avoid ZeroDivisionError
  if age>=18:
    print('can vote')
  else:
    print("can't vote")
except ZeroDivisionError:
    print('Cannot divide by zero')
except TypeError:
    print('Invalid type comparison')

def student_records(**kwargs):
  import pandas as pd
  try:
    data=pd.DataFrame(kwargs)
    return data
  except:
    data=pd.DataFrame(kwargs,index=[1])
    return data

student_records(Name='Ajay',Age=12,Address ="noida")

student_records(Name= ['Ajay','Krishna','Mohit'],
                Age= [12,10,9],
                Address = ['Noida','New Delhi','Pune'])

def check_palindrome(word:str):
  if type(word) == str:
    word = word.upper()
    if word == word[::-1]:
      return 'Palindrome'
    else:
      return 'Not a Plaindrome'
  else:
    return 'Invalid Data Type'

check_palindrome('harry')

check_palindrome('harry')

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

print(give_fibo(20))

print(give_fibo(20))

print(give_fibo(20))

def check_prime(number):
    for i in range(2,number):
        if number % i == 0:
            return 'Not a Prime Number'
            break
            print('Happy Holi')
    else:
        return 'Prime Number'

n = 5

for i in range(1,n+1):
  print(i * '* ')

n = 5

for i in range(1,n+1):
  print(' '*(n-i) + i*'* ')

'hello' + 'World'



'hello' + 'World'

def print_star(n = 5, typ = 'left',shape = '*'):
  if typ  == 'left':
    space  = ''

  elif typ == 'right':
    space = '  '

  elif typ == 'mid':
    space = ' '

  for i in range(1,n+1):
    print(space*(n-i) + i*f'{shape} ')

print_star(6,'mid','%')

def show_time():
  try:
    while True:
      import time
      print(time.asctime())
      time.sleep(1)
      display(clear=True)
  except:
    print("timer has been intrupted by the user")

show_time()

sales = [45678,63,456,347,3245]

# min(sales)



def minn(*data):
  min_ele = data[0]
  for i in data[1:]:
    if i< min_ele:
      min_ele = i
  return min_ele

minn(376,246,354,8,667,468)

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

add_hashtag(*company)

age=23
try:
  print(1/0) # Commenting this out to avoid ZeroDivisionError
  if age>=18:
    print('can vote')
  else:
    print("can't vote")
except ZeroDivisionError:
    print('Cannot divide by zero')
except TypeError:
    print('Invalid type comparison')

def student_records(**kwargs):
  import pandas as pd
  try:
    data=pd.DataFrame(kwargs)
    return data
  except:
    data=pd.DataFrame(kwargs,index=[1])
    return data

student_records(Name='Ajay',Age=12,Address ="noida")

student_records(Name= ['Ajay','Krishna','Mohit'],
                Age= [12,10,9],
                Address = ['Noida','New Delhi','Pune'])

def check_palindrome(word:str):
  if type(word) == str:
    word = word.upper()
    if word == word[::-1]:
      return 'Palindrome'
    else:
      return 'Not a Plaindrome'
  else:
    return 'Invalid Data Type'

check_palindrome('harry')

check_palindrome('harry')

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

data = [34,65,654,76,856]
print(data[-1])
print(data[-2])

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

print(give_fibo(20))

print(give_fibo(20))

print(give_fibo(20))

def check_prime(number):
    for i in range(2,number):
        if number % i == 0:
            return 'Not a Prime Number'
            break
            print('Happy Holi')
    else:
        return 'Prime Number'

n = 5

for i in range(1,n+1):
  print(i * '* ')

n = 5

for i in range(1,n+1):
  print(' '*(n-i) + i*'* ')

'hello' + 'World'



'hello' + 'World'

def print_star(n = 5, typ = 'left',shape = '*'):
  if typ  == 'left':
    space  = ''

  elif typ == 'right':
    space = '  '

  elif typ == 'mid':
    space = ' '

  for i in range(1,n+1):
    print(space*(n-i) + i*f'{shape} ')

print_star(6,'mid','%')

def show_time():
  try:
    while True:
      import time
      print(time.asctime())
      time.sleep(1)
      display(clear=True)
  except:
    print("timer has been intrupted by the user")

show_time()

sales = [45678,63,456,347,3245]

# min(sales)



def minn(*data):
  min_ele = data[0]
  for i in data[1:]:
    if i< min_ele:
      min_ele = i
  return min_ele

minn(376,246,354,8,667,468)

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

company = ['ola','uber','rapido','indrive','adani','tata']

# ['#OLA','#UBER','#RAPIDO']



def add_hashtag(*company):
  result = []
  for i in company:
    result.append('#'+i.upper())
  return result

add_hashtag(*company)

import kk as k

k.check_palindrome('ajay')

import kk as k
print("hello")

#pip install gTTS

#pip install pygame

import kk as k
k.give_fibo(10)
k.print_star(7,'right','$')
k.sound_box(700)

k.sound_box(700)



#pip install pygame

#pip install gTTS
from gtts import gTTS

import turtle
for i in range(5):
  turtle.circle(100)

import turtle
for i in range(4):
    turtle.circle(100)
    turtle.left(90)

import turtle
for i in range(120):
    turtle.bgcolor('black')
    col = ['red','yellow','green','blue','orange']
    import random
    picked_color = random.choice(col)
    turtle.color(picked_color)
    turtle.circle(100)
    turtle.left(3)

# 1:- Text File
#
# .py,.html, .csv, .tsv, .css, .java, .c, c++,. json, .js,
# 2: Binary File
# Software
# .pdf, .mp3, mp4, .png, .jpeg, .exe, .zip, .dat, .tar .xlsx, .ppt, .doc, .ipynb

file=open("kk.py",mode="r")
#print(file.read(100))
data=file.readlines()
print(data)
file.close()